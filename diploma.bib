@article{batty_2016,
	url = {https://doi.org/10.1145%2F2837614.2837637},
	year = 2016,
	month = {jan},
	publisher = {{ACM}},
	author = {Mark Batty and Alastair F. Donaldson and John Wickerson},
	title = {Overhauling {SC} atomics in C11 and {OpenCL}},
	booktitle = {Proceedings of the 43rd Annual {ACM} {SIGPLAN}-{SIGACT} Symposium on Principles of Programming Languages}
}

@article{pichon_pharabod2016concurrency,
    author = {Pichon-Pharabod, Jean and Sewell, Peter},
    title = {A Concurrency Semantics for Relaxed Atomics That Permits Optimisation and Avoids Thin-Air Executions},
    year = {2016},
    issue_date = {January 2016},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {51},
    number = {1},
    issn = {0362-1340},
    url = {https://doi.org/10.1145/2914770.2837616},
    journal = {SIGPLAN Not.},
    month = {jan},
    pages = {622–633},
    numpages = {12},
    keywords = {C/C++, Relaxed memory models, Concurrency}
}

@article{lahav2017repairing,
    author = {Lahav, Ori and Vafeiadis, Viktor and Kang, Jeehoon and Hur, Chung-Kil and Dreyer, Derek},
    title = {Repairing Sequential Consistency in C/C++11},
    year = {2017},
    issue_date = {June 2017},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {52},
    number = {6},
    issn = {0362-1340},
    url = {https://doi.org/10.1145/3140587.3062352},
    journal = {SIGPLAN Not.},
    month = {jun},
    pages = {618–632},
    numpages = {15},
    keywords = {sequential consistency, Weak memory models, C++11, declarative semantics}
}

@book{bertot2013interactive, 
  title={Interactive theorem proving and program development: Coq’Art: the calculus of inductive constructions}, 
  author={Bertot, Yves and Cast{\'e}ran, Pierre}, 
  year={2013}, 
  publisher={Springer Science \& Business Media} 
}

@article{hahn_lib,
    title={Hahn: a Coq library that contains a useful collection of lemmas and tactics about lists and binary relations}, 
    author={Viktor Vafeiadis et al.},
    year={2018},
    url={https://github.com/vafeiadis/hahn},
}

@article{ocaml_rust_ffi,
    title={ocaml-rs: OCaml extensions in Rust},
    author={Zach Shipko et al.},
    year={2021},
    url={https://crates.io/crates/ocaml},
}

@article{PichonPharabod_Sewell16,
author = {Pichon-Pharabod, Jean and Sewell, Peter},
title = {A Concurrency Semantics for Relaxed Atomics That Permits Optimisation and Avoids Thin-Air Executions},
year = {2016},
issue_date = {January 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/2914770.2837616},
doi = {10.1145/2914770.2837616},
journal = {SIGPLAN Not.},
month = {jan},
pages = {622–633},
numpages = {12},
keywords = {Relaxed memory models, C/C++, Concurrency}
}

@article{egg,
author = {Willsey, Max and Nandi, Chandrakana and Wang, Yisu Remy and Flatt, Oliver and Tatlock, Zachary and Panchekha, Pavel},
title = {Egg: Fast and Extensible Equality Saturation},
year = {2021},
issue_date = {January 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {POPL},
url = {https://doi.org/10.1145/3434304},
doi = {10.1145/3434304},
abstract = {An e-graph efficiently represents a congruence relation over many expressions. Although they were originally developed in the late 1970s for use in automated theorem provers, a more recent technique known as equality saturation repurposes e-graphs to implement state-of-the-art, rewrite-driven compiler optimizations and program synthesizers. However, e-graphs remain unspecialized for this newer use case. Equality saturation workloads exhibit distinct characteristics and often require ad-hoc e-graph extensions to incorporate transformations beyond purely syntactic rewrites. This work contributes two techniques that make e-graphs fast and extensible, specializing them to equality saturation. A new amortized invariant restoration technique called rebuilding takes advantage of equality saturation's distinct workload, providing asymptotic speedups over current techniques in practice. A general mechanism called e-class analyses integrates domain-specific analyses into the e-graph, reducing the need for ad hoc manipulation. We implemented these techniques in a new open-source library called egg. Our case studies on three previously published applications of equality saturation highlight how egg's performance and flexibility enable state-of-the-art results across diverse domains.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {23},
numpages = {29},
keywords = {e-graphs, equality saturation}
}

@article{ruler,
author = {Nandi, Chandrakana and Willsey, Max and Zhu, Amy and Wang, Yisu Remy and Saiki, Brett and Anderson, Adam and Schulz, Adriana and Grossman, Dan and Tatlock, Zachary},
title = {Rewrite Rule Inference Using Equality Saturation},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {OOPSLA},
url = {https://doi.org/10.1145/3485496},
doi = {10.1145/3485496},
abstract = {Many compilers, synthesizers, and theorem provers rely on rewrite rules to simplify expressions or prove equivalences. Developing rewrite rules can be difficult: rules may be subtly incorrect, profitable rules are easy to miss, and rulesets must be rechecked or extended whenever semantics are tweaked. Large rulesets can also be challenging to apply: redundant rules slow down rule-based search and frustrate debugging. This paper explores how equality saturation, a promising technique that uses e-graphs to apply rewrite rules, can also be used to infer rewrite rules. E-graphs can compactly represent the exponentially large sets of enumerated terms and potential rewrite rules. We show that equality saturation efficiently shrinks both sets, leading to faster synthesis of smaller, more general rulesets. We prototyped these strategies in a tool dubbed Ruler. Compared to a similar tool built on CVC4, Ruler synthesizes 5.8\texttimes{} smaller rulesets 25\texttimes{} faster without compromising on proving power. In an end-to-end case study, we show Ruler-synthesized rules which perform as well as those crafted by domain experts, and addressed a longstanding issue in a popular open source tool.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {119},
numpages = {28},
keywords = {Program Synthesis, Rewrite Rules, Equality Saturation}
}

@incollection{paulinmohring:hal-01094195,
  TITLE = {{Introduction to the Calculus of Inductive Constructions}},
  AUTHOR = {Paulin-Mohring, Christine},
  URL = {https://hal.inria.fr/hal-01094195},
  BOOKTITLE = {{All about Proofs, Proofs for All}},
  EDITOR = {Bruno Woltzenlogel Paleo and David Delahaye},
  PUBLISHER = {{College Publications}},
  SERIES = {Studies in Logic (Mathematical logic and foundations)},
  VOLUME = {55},
  YEAR = {2015},
  MONTH = Jan,
  KEYWORDS = {Calculus of Inductive Constructions ; Coq proof assistant},
  PDF = {https://hal.inria.fr/hal-01094195/file/CIC.pdf},
  HAL_ID = {hal-01094195},
  HAL_VERSION = {v1},
}

@article{appel_4color1976,
 ISSN = {0003049X},
 URL = {http://www.jstor.org/stable/986491},
 author = {Kenneth I. Appel},
 journal = {Proceedings of the American Philosophical Society},
 number = {1},
 pages = {35--39},
 publisher = {American Philosophical Society},
 title = {The Use of the Computer in the Proof of the Four Color Theorem},
 urldate = {2023-03-29},
 volume = {128},
 year = {1984}
}

@inproceedings{Gonthier2008FormalPF,
  title={Formal Proof—The Four- Color Theorem},
  author={Georges Gonthier},
  year={2008},
  url={https://www.ams.org/notices/200811/tx081101382p.pdf},
}

@article{kater,
author = {Kokologiannakis, Michalis and Lahav, Ori and Vafeiadis, Viktor},
title = {Kater: Automating Weak Memory Model Metatheory and Consistency Checking},
year = {2023},
issue_date = {January 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {POPL},
url = {https://doi.org/10.1145/3571212},
doi = {10.1145/3571212},
abstract = {The metatheory of axiomatic weak memory models covers questions like the correctness of compilation mappings from one model to another and the correctness of local program transformations according to a given model---topics usually requiring lengthy human investigation. We show that these questions can be solved by answering a more basic question: "Given two memory models, is one weaker than the other?" Moreover, for a wide class of axiomatic memory models, we show that this basic question can be reduced to a language inclusion problem between regular languages, which is decidable. Similarly, implementing an efficient check for whether an execution graph is consistent according to a given memory model has required non-trivial manual effort. Again, we show that such efficient checks can be derived automatically for a wide class of axiomatic memory models, and that incremental consistency checks can be incorporated in GenMC, a state-of-the-art model checker for concurrent programs. As a result, we get the first time- and space-efficient bounded verifier taking the axiomatic memory model as an input parameter.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {19},
numpages = {29},
keywords = {Model Checking, Kleene Algebra with Tests, Weak Memory Models}
}

@article{nelson_1980,
author = {Nelson, Greg and Oppen, Derek C.},
title = {Fast Decision Procedures Based on Congruence Closure},
year = {1980},
issue_date = {April 1980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {2},
issn = {0004-5411},
url = {https://doi.org/10.1145/322186.322198},
doi = {10.1145/322186.322198},
abstract = {The notion of the congruence closure of a relation on a graph is defined and several algorithms for computing it are surveyed. A simple proof is given that the congruence closure algorithm provides a decision procedure for the quantifier-free theory of equality. A decision procedure is then given for the quantifier-free theory of LISP list structure based on the congruence closure algorithm. Both decision procedures determine the satisfiability of a conjunction of literals of length n in average time O(n log n) using the fastest known congruence closure algorithm. It is also shown that if the axiomatization of the theory of list structure is changed slightly, the problem of determining the satisfiability of a conjunction of literals becomes NP-complete. The decision procedures have been implemented in the authors' simplifier for the Stanford Pascal Verifier.},
journal = {J. ACM},
month = {apr},
pages = {356–364},
numpages = {9}
}

@article{tarjan_1975,
author = {Tarjan, Robert Endre},
title = {Efficiency of a Good But Not Linear Set Union Algorithm},
year = {1975},
issue_date = {April 1975},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {22},
number = {2},
issn = {0004-5411},
url = {https://doi.org/10.1145/321879.321884},
doi = {10.1145/321879.321884},
journal = {J. ACM},
month = {apr},
pages = {215–225},
numpages = {11}
}

@techreport{pascal_verifier_manual_1979,
author = {Luckham, David C. and German, Steven M. and von Henke, Friedrich W. and Karp, Richard A. and Milne, P. W. and Oppen, Derek C. and Polak, Wolfgang and Scherlis, William L.},
title = {Stanford Pascal Verifier User Manual},
year = {1979},
publisher = {Stanford University},
address = {Stanford, CA, USA},
abstract = {The Stanford PASCAL verifier is an interactive program verification system. It automates much of the work necessary to analyze a program for consistency with its documentation, and to give a rigorous mathematical proof of such consistency or to pin-point areas of inconsistency. It has been shown to have applications as an aid to programming, and to have potential for development as a new and useful tool in the production of reliable software.}
}

@ARTICLE{lamport_tc79,
  author={Lamport},
  journal={IEEE Transactions on Computers}, 
  title={How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs}, 
  year={1979},
  volume={C-28},
  number={9},
  pages={690-691},
  doi={10.1109/TC.1979.1675439}}

@article{Alglave-al:TOPLAS14,
 author = {Alglave, Jade and Maranget, Luc and Tautschnig, Michael},
 title = {Herding Cats: Modelling, Simulation, Testing, and Data Mining for Weak Memory},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {July 2014},
 volume = {36},
 number = {2},
 month = jul,
 year = {2014},
 issn = {0164-0925},
 pages = {7:1--7:74},
 articleno = {7},
 numpages = {74},
 url = {http://doi.acm.org/10.1145/2627752},
 doi = {10.1145/2627752},
 acmid = {2627752},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Concurrency, software verification, weak memory models}
} 

@inproceedings{demoura:ematching,
author = {de Moura, Leonardo and Bjørner, Nikolaj},
year = {2007},
month = {07},
pages = {183-198},
title = {Efficient E-Matching for SMT Solvers},
volume = {4603},
isbn = {978-3-540-73594-6},
doi = {10.1007/978-3-540-73595-3_13}
}